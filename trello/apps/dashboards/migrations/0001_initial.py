# Generated by Django 4.2.3 on 2023-08-30 04:45

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='Create at')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='Update at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('title', models.CharField(help_text='Title of the board', max_length=150, verbose_name='Title')),
                ('background_image', models.ImageField(default='uploads/backgrounds/default_background.jpg', upload_to='uploads/backgrounds/', verbose_name='Background image')),
            ],
            options={
                'verbose_name': 'Board',
                'verbose_name_plural': 'Boards',
                'ordering': ['work_space'],
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='Create at')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='Update at')),
                ('title', models.CharField(help_text='Title of the label', max_length=300, verbose_name='Title')),
                ('board', models.ForeignKey(help_text='Board associated with the label', on_delete=django.db.models.deletion.CASCADE, related_name='board_labels', to='dashboards.board', verbose_name='Board')),
            ],
            options={
                'verbose_name': 'Label',
                'verbose_name_plural': 'Labels',
                'unique_together': {('title', 'board')},
            },
        ),
        migrations.CreateModel(
            name='WorkSpace',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='Create at')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='Update at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('title', models.CharField(help_text='Title of the workspace', max_length=150, verbose_name='Title')),
                ('members', models.ManyToManyField(help_text='members of the workspace', related_name='member_work_spaces', to=settings.AUTH_USER_MODEL, verbose_name='Members')),
                ('owner', models.ForeignKey(help_text='The owner of the workspace', on_delete=django.db.models.deletion.CASCADE, related_name='owner_work_spaces', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'WorkSpace',
                'verbose_name_plural': 'WorkSpaces',
                'ordering': ['-create_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='Create at')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='Update at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('title', models.CharField(help_text='Title of the Tasklist', max_length=150, verbose_name='Title')),
                ('board', models.ForeignKey(help_text='Board associated with the Tasklist', on_delete=django.db.models.deletion.CASCADE, related_name='board_Tasklists', to='dashboards.board', verbose_name='Board')),
            ],
            options={
                'verbose_name': 'TaskList',
                'verbose_name_plural': 'TaskLists',
                'ordering': ['board'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='Create at')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='Update at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('title', models.CharField(help_text='Title of the task', max_length=300, verbose_name='Title')),
                ('description', models.TextField(help_text='Description of the task', verbose_name='Description')),
                ('order', models.IntegerField(default=1, help_text='Order of the task', verbose_name='Order')),
                ('start_date', models.DateTimeField(blank=True, help_text='Start date of the task', null=True, verbose_name='Start Date')),
                ('end_date', models.DateTimeField(blank=True, help_text='End date of the task', null=True, verbose_name='End Date')),
                ('assigned_to', models.ManyToManyField(help_text='User assigned to the task', related_name='assigned_tasks', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('labels', models.ManyToManyField(help_text='Label associated with the task', related_name='label_tasks', to='dashboards.label', verbose_name='Label')),
                ('status', models.ForeignKey(help_text='Status of the task', on_delete=django.db.models.deletion.CASCADE, related_name='status_tasks', to='dashboards.tasklist', verbose_name='Status')),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='Create at')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='Update at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('body', models.TextField(help_text='Body of the comment', verbose_name='Body')),
                ('author', models.ForeignKey(help_text='Author of the comment', on_delete=django.db.models.deletion.DO_NOTHING, related_name='author_comments', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboards.comment', verbose_name='Parent')),
                ('task', models.ForeignKey(help_text='Task associated with the comment', on_delete=django.db.models.deletion.CASCADE, related_name='task_comments', to='dashboards.task', verbose_name='Task')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
            },
        ),
        migrations.AddField(
            model_name='board',
            name='work_space',
            field=models.ForeignKey(help_text='work space of the board', on_delete=django.db.models.deletion.CASCADE, related_name='work_space_boards', to='dashboards.workspace', verbose_name='Workspace'),
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='Create at')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='Update at')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('file', models.FileField(blank=True, upload_to='uploads/attachments/', verbose_name='file')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='owner_attachments', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('task', models.ForeignKey(help_text='Task of the attachment', on_delete=django.db.models.deletion.CASCADE, related_name='task_attachments', to='dashboards.task', verbose_name='Task')),
            ],
            options={
                'verbose_name': 'Attachment',
                'verbose_name_plural': 'Attachments',
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='Create at')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='Update at')),
                ('message', models.TextField(help_text='message of the activity', max_length=300, verbose_name='message')),
                ('doer', models.ForeignKey(help_text='Doer of the activity', on_delete=django.db.models.deletion.DO_NOTHING, related_name='doer_activity', to=settings.AUTH_USER_MODEL, verbose_name='Doer')),
                ('task', models.ForeignKey(help_text='Task associated with the activity', on_delete=django.db.models.deletion.CASCADE, related_name='task_activity', to='dashboards.task', verbose_name='Task')),
            ],
            options={
                'verbose_name': 'Activitie',
                'verbose_name_plural': 'Activities',
                'ordering': ['create_at'],
            },
        ),
    ]
